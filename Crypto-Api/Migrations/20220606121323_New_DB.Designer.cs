// <auto-generated />
using Cripto_Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cripto_Api.Migrations
{
    [DbContext(typeof(CriptoAPIDbContext))]
    [Migration("20220606121323_New_DB")]
    partial class New_DB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cripto_Api.Data.Coin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CoinAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("CoinName")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("WalletId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("Cripto_Api.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "$2a$11$m3DHPTOG6lZ/VbUCkJKNJu46ujk4TE9/q7hUMpXKYSGG/fj0BRN6G",
                            Role = "admin",
                            Salt = "$2a$12$urhiqUgDs6tmx8oegcdLdO",
                            Username = "Eima"
                        },
                        new
                        {
                            Id = 2,
                            Password = "$2a$11$NDFPOX57EVOuIQMqhs0IFua0j2yz6cDXUQk1aYpieIz27PI40a0GS",
                            Role = "user",
                            Salt = "$2a$12$vJK7axLSWZs2g1pHuVQQ8u",
                            Username = "Eima1"
                        });
                });

            modelBuilder.Entity("Cripto_Api.Data.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WalletName")
                        .HasColumnType("text");

                    b.Property<string>("WalletNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1,
                            WalletName = "BigTech Wallet",
                            WalletNumber = "A22asd42asd"
                        });
                });

            modelBuilder.Entity("Cripto_Api.Data.Coin", b =>
                {
                    b.HasOne("Cripto_Api.Data.Wallet", "Wallet")
                        .WithMany("Coins")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Cripto_Api.Data.Wallet", b =>
                {
                    b.HasOne("Cripto_Api.Data.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cripto_Api.Data.User", b =>
                {
                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Cripto_Api.Data.Wallet", b =>
                {
                    b.Navigation("Coins");
                });
#pragma warning restore 612, 618
        }
    }
}
